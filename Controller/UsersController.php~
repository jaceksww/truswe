<?php
/**
 * CakePHP(tm) : Rapid Development Framework (http://cakephp.org)
 * Copyright (c) Cake Software Foundation, Inc. (http://cakefoundation.org)
 *
 * Licensed under The MIT License
 * For full copyright and license information, please see the LICENSE.txt
 * Redistributions of files must retain the above copyright notice.
 *
 * @copyright Copyright (c) Cake Software Foundation, Inc. (http://cakefoundation.org)
 * @link      http://cakephp.org CakePHP(tm) Project
 * @since     0.2.9
 * @license   http://www.opensource.org/licenses/mit-license.php MIT License
 */
namespace App\Controller;

use Cake\Core\Configure;
use Cake\Network\Exception\NotFoundException;
use Cake\View\Exception\MissingTemplateException;
use Cake\Datasource\ConnectionManager;
use Cake\ORM\TableRegistry;
 use Cake\Network\Http\Client;
/**
 * Static content controller
 *
 * This controller will render views from Template/Pages/
 *
 * @link http://book.cakephp.org/3.0/en/controllers/pages-controller.html
 */

class UsersController extends AppController
{
	public $helpers = ['Session'];
	public function initialize()
    {
        parent::initialize();
		$this->loadComponent('Image');
		$session = $this->request->session();
	    $this->loadComponent('RequestHandler');
    
    }
	
	public function logout()
	{
		
		$this->session->destroy('User');
		$this->Flash->success('Zostałęś wylogowany z serwisu.');
		return $this->redirect('/');
	}
	public function login()
	{
		
		if(!empty($this->request->data)){
			if(empty($this->request->data['login']) || empty($this->request->data['password'])){
				$this->Flash->error('Login i hasło są obowiązkowe');
				return $this->redirect('/users/login');
			}
			
			$checkUser = $this->Users->findUserByLoginPass($this->request->data('login'), $this->request->data('password'));
			if(!empty($checkUser)){
				$this->Flash->success('Witaj '.$checkUser[0]['login'].'! Logowanie zakończyło się powodzeniem.');
				unset($checkUser[0]['password']);
				$this->session->write('User', $checkUser[0]);
				return $this->redirect('/');
			}else{
				$this->Flash->error('Nieudana próba logowania. Spróbuj ponownie.');
				return $this->redirect('/users/login');
			}
		}
		
	}
	public function create_account()
	{
		
		if(!empty($this->request->data)){
			
			$error = $this->Users->checkErrors($this->request->data);
			
			$http = new Client();
			//client secret: 6LcVSAkTAAAAAMq0ReQwFbz5_-d11ajrYbfgFCSe
			//transp secret: 6LfiNgkTAAAAACm7btqBsvsxEUsGfE23gvcIOtrq
			if($_POST['type'] == 1)
			{
				$response = $http->post('https://www.google.com/recaptcha/api/siteverify', [
				  'secret' => '6LfiNgkTAAAAACm7btqBsvsxEUsGfE23gvcIOtrq',
				  'response' => $_POST['g-recaptcha-response']
				]);
			}else{
				$response = $http->post('https://www.google.com/recaptcha/api/siteverify', [
				  'secret' => '6LcVSAkTAAAAAMq0ReQwFbz5_-d11ajrYbfgFCSe',
				  'response' => $_POST['g-recaptcha-response']
				]);

			}
			
			$resp = json_decode($response->body);
			if(!$resp->success){
			{
				$error .= 'Źle zweryfikowana kontrola antyspamowa!';
			}
			
			
			if($error == ''){
				
				$users = TableRegistry::get('Users');
				$this->request->data['uri'] = $this->myurl($this->request->data('login'));
				$this->request->data['password'] = md5($this->request->data['password']);
				$entity = $users->newEntity($this->request->data());
				
				$users->save($entity);
				mkdir(WWW_ROOT."/uploads/profiles/".$entity->id, 0777);
				
				if($_POST['type'] == 1)
				{
					if(!empty($_POST['transportType'])){
						$this->Users->saveUserCategories($_POST['transportType'], $entity->id);
					}
				}
				
				$this->Flash->success('Profil utworzono pomyślnie. Na podany adres email została wysłana ...');
				
				return $this->redirect('/');
			}
			else{
				$this->Flash->error($error);
				//return $this->redirect('/users/create_account');
			}
			

		}
		$queryCats = $this->Users->getCats();
		$this->set('cats',  $queryCats);
	}
	
	public function checkIfExists($field, $val){
		
		$queryUser = $this->Users->getByField($field, $val);
		$ret = array();
		if( empty($queryUser) ){
			 $ret['exists'] = false;
		}else{
			$ret['exists'] = true;
		}
		
		$this->autoRender = false;
		$this->set('_serialize', $ret);
		echo json_encode($ret);
	}
	
	
	public function profile($profile)
	{
		$queryUser = $this->Users->getUserParams($profile);
		$this->set('userParams',  $queryUser);
		if($queryUser[0]['type'] == '1'){
			$this->layout = 'profile';
		}else{
			$this->layout = 'profilesimple';
		}
	}

    /**
     * Displays a view
     *
     * @return void|\Cake\Network\Response
     * @throws \Cake\Network\Exception\NotFoundException When the view file could not
     *   be found or \Cake\View\Exception\MissingTemplateException in debug mode.
     */
    public function search($catID=1, $page=0)
    {
		
			$limit = Configure::read('pagination_item_per_page');
			$start = $page*Configure::read('pagination_item_per_page');
			$total_pages = ceil($this->Users->getTotalUsersOfCat($catID) / Configure::read('pagination_item_per_page'));
			$this->set('total_pages',  $total_pages);
			$this->set('current_page',  $page);
			
		/*
        $query = $this->Users
			->find('all')
			->contain(['UserCategories' => function ($q) use ($catID){
					   return $q
							->select(['name'])
							->where(['UserCategories.id' => $catID]);
					}])
					->group(['Users.id']);
					*/
			$query = $this->Users->getUsersOfCat($catID, true,$start, $limit);
			
			
			$this->set('profiles',  $query);
			$queryCat = $this->Users->getCatParams($catID);
			$this->set('catParams',  $queryCat);
			
		
    }
	function getTRASA(){
		//SELECT uc1.city, uc2.city FROM `user_cities` uc1 ,`user_cities` as uc2 WHERE uc1.city = 'Pradolina' and uc2.city = 'Mikkowo'  and uc1.user_id = uc2.user_id
	}
	public function getAllWithCats()
    {
        $query = $this->Users->find('all')->contain(['UserCategories']);
		foreach ($query as $user) {
			//print_r($user);
			echo $user['login'].'<br />';
			foreach($user->user_categories as $cat){
				echo $cat['name'].',';
			}
			echo '<br />';
		}
    }
	
	
	/*account*/
	public function manage()
    {
    	$this->checkIfLoggedIn();
		$id = $this->session->read('User.id');
		
			$user = $this->Users->get($id);
			$this->set('user', $user);
    		$this->set('title', 'Moje konto');
			$this->set('subtitle', 'Zarządzanie profilem');
    	
    	
    	if(!empty($this->request->data)){
    		//$this->request->data['uri'] = strtolower($this->myurl($this->request->data['name']));
			$users = TableRegistry::get('Users');
			$entity = $users->newEntity($this->request->data());
    		
    		$users->save($entity);
			
			if($_POST['type'] == 1)
				{
					if(!empty($_POST['transportType'])){
						$this->Users->resetUserCategories( $entity->id);
						$this->Users->saveUserCategories($_POST['transportType'], $entity->id);
					}
				}
				
    		$this->Flash->set('Dane użytkownika zostały zapisane pomyślnie.');
    		return $this->redirect(['controller'=>'users','action' => 'index', $entity->type]);
    	}
    	
		$queryCats = $this->Users->getCats();
		$this->set('cats',  $queryCats);
		
		$queryUsersCats = $this->Users->getUserCategories($id);
		$this->set('usersCats',  $queryUsersCats);
		$this -> render('/Admin/Users/manage');
    }
    public function manageCities($id=0)
    {
		$this->set('title', 'Moje konto');
		$this->set('subtitle', 'Zarządzanie miejscowościami');
		
		$this->set('userID',  $id);
		if(!empty($this->request->data)){
			$this->Users->addUserCity($_POST['userID'], $_POST['city']);
			$this->Flash->set('Miejscowość została zapisana pomyślnie.');
			return $this->redirect(['controller'=>'users','action' => 'manageCities', $_POST['userID']]);
		}
		$queryUsersCities = $this->Users->getUserCities($id);
		$this->set('usersCities',  $queryUsersCities);
		
		$this -> render('/Admin/Users/manage_cities');
	}
	public function removeCity($id=0, $userID)
    {
		$this->Users->remUserCity($id, $userID);
		
		return $this->redirect(['controller'=>'users','action' => 'manageCities', $userID]);
	}
	
	// main image
	public function mainimage($userID){
		$this->set('title', 'Moje konto');
		$this->set('subtitle', 'Zarządzanie zdjęciem głównym (Avatar)');
			
		if(!empty($this->request->data)){
			$tmpname = rand(000000,99999999999).'.jpg';
			move_uploaded_file($_FILES['new_mainImage']['tmp_name'], Configure::read('staticurl')."profiles/tmp/".$tmpname);
			$this->Image->prepare(Configure::read('staticurl')."profiles/tmp/".$tmpname);
			$this->Image->resize(320,200);//width,height,Red,Green,Blue
			$this->Image->save(Configure::read('staticurl')."profiles/".$userID."/".$tmpname);//.$Largeimage[0].'_L.'.$Largeimage[1]
			
			$this->Users->saveUserMainimage($tmpname, $userID);
			unlink(Configure::read('staticurl')."profiles/tmp/".$tmpname);
			
		}
		$this->set('userID', $userID);
		$user = $this->Users->get($userID);
		$this->set('mainimage', $user['mainImage']);
		
		$this -> render('/Admin/Users/mainimage');
	}
    
    
    
}
